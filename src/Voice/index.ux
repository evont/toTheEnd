<template>
    <refresh @refresh="refresh" refreshing="{{isRefreshing}}">
        <list class="voice-list" onscrollbottom="loadMore">
            <list-item if="isRefreshing" class="loading"  type="loading">
                    <text>书架读取中...</text>
            </list-item>
            <list-item else for="{{ list }}" class="voice-item"  type="voice-item" onclick="playSound">
                <stack class="cover" >
                    <image src="{{ $item.cover }}" ></image>
                    <div class="cover-tag">
                        <text>{{ $item.tag }}</text>
                    </div>
                </stack>
                <div class="intro">
                    <text class="intro-title">{{ $item.name }}</text>
                    <div class="intro-author"><text>作者：{{ $item.author }}</text><text>主播：{{ $item.host }}</text></div>
                </div>
            </list-item>
        </list>
    </refresh>
</template>
<style>
@import '../Common/common.css';

.voice-list {
    flex-direction: column;
    flex: 1;
    padding: 10px 20px;
}
.voice-item {
    flex-direction: column;
    flex: 1;
    margin: 20px 0;
    border: 1px solid #dddddd;
}
.voice-item .cover {
    height: 400px;
}
.voice-item .cover image {
    height: 400px;
    resize-mode: cover;
}
.voice-item .cover-tag {
    padding: 10px;
    flex: 1;
    justify-content: flex-start;
    align-items: flex-start;
}
.voice-item .cover-tag text {
    padding: 8px 15px;
    border-radius: 8px;
    background-color: rgba(0, 0, 0, .8);
    color: #ffffff;
    font-size: 18px;
}
.voice-item .intro {
    height: 110px;
    padding: 15px 20px;
    flex-direction: column;
}
.voice-item .intro-title {
    color: #333333;
    font-size: 32px;
    
}
.voice-item .intro-author text {
    color: #999999;
    font-size: 24px;
    margin-right: 20px;
}
</style>

<script>
    import fetch from '@system.fetch'
    import audio from '@system.audio'
    import prompt from '@system.prompt'
    export default {
        data: {
            list: [],
            page: 1,
            isRefreshing: false
        },
        onInit () {
            this.refresh({refreshing: true})
            this.fetchVoice();
        },
        refresh (evt) {
            this.isRefreshing = evt.refreshing;
            this.page = 1;
            this.fetchVoice();
        },
        fetchVoice () {
            let _self = this;
            let page = this.page;
            fetch.fetch({
                url: `/api/voice/list/${page}`,
                success: function(res){
                    let model = JSON.parse(res.data).model;
                    if(page > 1) {
                        _self.list = _self.list.concat(model.list);
                    } else {
                        _self.list = model.list;
                        _self.isRefreshing = false;
                    }
                    
                },
                fail: function(data, code) {
                    console.log("handling fail, code=" + code);
                }
            })
        },
        playSound () {
            audio.autoplay = true;
            // 每日一文音频获取有问题，原因未知，播放功能搁置
            audio.src = 'http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&uin=346897220&vkey=6292F51E1E384E061FF02C31F716658E5C81F5594D561F2E88B854E81CAAB7806D5E4F103E55D33C16F3FAC506D1AB172DE8600B37E43FAD&fromtag=46';
            audio.onplay = function() {
                prompt.showToast({
                    message: 'begin'
                })
            }
            
            audio.onloadeddata = function() {
                prompt.showToast({
                    message: 'plaing'
                })
                audio.play()
            }
            
            audio.onended = function() {
                prompt.showToast({
                    message: 'end'
                })
            }
            audio.onerror = function() {
                prompt.showToast({
                    message: 'error'
                })
            }
        }
    }
</script>