<template>
    <refresh @refresh="refresh" refreshing="{{isRefreshing}}">
        <list class="voice-list" onscrollbottom="loadMore">
            <list-item if="isRefreshing" class="loading"  type="loading">
                    <text>书架读取中...</text>
            </list-item>
            <list-item else for="{{ list }}" class="voice-item"  type="voice-item">
                <stack class="cover">
                    <image src="{{ $item.cover }}" ></image>
                    <div class="cover-tag">
                        <text>{{ $item.tag }}</text>
                    </div>
                </stack>
                <div class="intro">
                    <text class="intro-title">{{ $item.name }}</text>
                    <div class="intro-author"><text>作者：{{ $item.author }}</text><text>主播：{{ $item.host }}</text></div>
                </div>
            </list-item>
        </list>
    </refresh>
</template>
<style>
@import '../Common/common.css';

.voice-list {
    flex-direction: column;
    flex: 1;
    padding: 10px 20px;
}
.voice-item {
    flex-direction: column;
    flex: 1;
    margin: 20px 0;
    border: 1px solid #dddddd;
}
.voice-item .cover {
    height: 400px;
}
.voice-item .cover image {
    height: 400px;
    resize-mode: cover;
}
.voice-item .cover-tag {
    padding: 10px;
    flex: 1;
    justify-content: flex-start;
    align-items: flex-start;
}
.voice-item .cover-tag text {
    padding: 8px 15px;
    border-radius: 8px;
    background-color: rgba(0, 0, 0, .8);
    color: #ffffff;
    font-size: 18px;
}
.voice-item .intro {
    height: 110px;
    padding: 15px 20px;
    flex-direction: column;
}
.voice-item .intro-title {
    color: #333333;
    font-size: 32px;
    
}
.voice-item .intro-author text {
    color: #999999;
    font-size: 24px;
    margin-right: 20px;
}
</style>

<script>
    import fetch from '@system.fetch'
    export default {
        data: {
            list: [],
            page: 1,
            isRefreshing: false
        },
        onInit () {
            this.refresh({refreshing: true})
            this.fetchVoice();
        },
        refresh (evt) {
            this.isRefreshing = evt.refreshing;
            this.page = 1;
            this.fetchVoice();
        },
        fetchVoice () {
            let _self = this;
            let page = this.page;
            fetch.fetch({
                url: `http://daren.vipc.me/api/voice/list/${page}`,
                success: function(res){
                    let model = JSON.parse(res.data).model;
                    if(page > 1) {
                        _self.list = _self.list.concat(model.list);
                    } else {
                        _self.list = model.list;
                        _self.isRefreshing = false;
                    }
                    
                },
                fail: function(data, code) {
                    console.log("handling fail, code=" + code);
                }
            })
        },
        loadMore () {
            // 后续加上是否有更多数据的判断
            this.page += 1;
            this.fetchVoice();   
        }
    }
</script>